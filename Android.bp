//
// Copyright (C) 2018 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

cc_defaults {
    name: "libbccbpf_defaults",
    cpp_std: "c++11",
    cflags: [
       "-Wno-compare-distinct-pointer-types",
       "-Wno-extern-c-compat",
       "-Wno-implicit-fallthrough",
       "-Wno-missing-field-initializers",
       "-Wno-non-virtual-dtor",
       "-Wno-unused-parameter",

       // BCC will try to look for kernel headers here if BCC_KERNEL_SOURCE
       // env variable is not defined
       "-DKERNEL_MODULES_DIR=\"/data/local/tmp/modules\"",
       "-DBCC_PROG_TAG_DIR=\"/data/local/tmp/bpf\"",
       "-DLLVM_MAJOR_VERSION=8",

        // linux/compiler.h from libbpf collides with with the one provided by
        // bionic. Bionic version defines two macros and we need one of them,
        // define that one here as a workaround."
        "-D__user=",
    ],
    cppflags: [
        "-fexceptions",
    ],
    header_libs: [
        "libbccbpf_headers",
    ],
}

cc_library_headers {
    name: "libbccbpf_headers",
    export_include_dirs: [
        "src/cc/",
    ],
}

cc_library_static {
    name: "libbccbpf",
    defaults: ["libbccbpf_defaults"],
    srcs: [
        "src/cc/*.c",
        "src/cc/*.cc",
    ],
    exclude_srcs: [
        "src/cc/bpf_module_rw_engine_disabled.cc",
    ],
    whole_static_libs: [
        "libbccbpf_api",
        "libbccbpf_frontends_b",
        "libbccbpf_frontends_clang",
        "libbccbpf_usdt",
    ],
    static_libs: [
        "libbpf_bpftrace",
        "libclang8",
        "libelf",
        "libllvm8",
    ],
    shared_libs: [
        "libz",
    ],
    export_header_lib_headers: ["libbccbpf_headers"],
}
